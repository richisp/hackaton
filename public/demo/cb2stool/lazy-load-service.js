var Crate=Crate||{};Crate.Services=Crate.Services||{};Crate.Services.LazyLoadService=function(){function t(t,r){if(t!==null&&typeof t!="undefined"&&t.length>0)if("IntersectionObserver"in window){r===""&&(r="500px 200px");var u={root:null,rootMargin:r},f=new IntersectionObserver(function(n,t){n.forEach(function(n){n.isIntersecting&&(i(n.target),t.unobserve(n.target))})},u);t.forEach(function(n){f.observe(n)})}else n||Crate.Services.HttpService.loadScript("/scripts/common/thirdparty/lazysizes.min.js").then(function(){n=!0})}function i(n){var t=n.getAttribute("data-src");t!==null&&(n.setAttribute("src",t),n.classList.remove("lazyload"),n.removeAttribute("data-src"),n.removeAttribute("data-lazy-load"),n.setAttribute("data-lazy-loaded",!0))}function r(n,t,i){if(n!==null&&typeof n!="undefined")if("IntersectionObserver"in window){(i===null||typeof i=="undefined"||i==="")&&(i="500px 200px");var r={root:null,rootMargin:i},u=new IntersectionObserver(function(n,i){n.forEach(function(n){n.isIntersecting&&(i.unobserve(n.target),t())})},r);u.observe(n)}else t()}var n=!1;return{watch:t,watchReactElement:r}}()